{
    "service_job_id": "iphone-app-unit-tests/1250",
    "service_name": "travis-ci",
    "repo_token": "b8bfee72818dbc6dcd829fe50ff7d76b",
    "source_files": [
        {
            "name": "XNGOAuth1Client/NSDictionary+XNGOAuth1Additions.m",
            "source": "#import \"NSDictionary+XNGOAuth1Additions.h\"\n#import \"NSString+XNGOAuth1Additions.h\"\n\n@implementation NSDictionary (XNGOAuth1Additions)\n\n+ (id)xng_dictionaryFromQueryString:(NSString *)queryString {\n    return [[NSDictionary alloc] xng_initWithQueryString:queryString];\n}\n\n- (id)xng_initWithQueryString:(NSString *)queryString {\n    NSArray *components = [queryString componentsSeparatedByString:@\"&\"];\n    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];\n\n    for (NSString *component in components) {\n        NSArray *keyValue = [component componentsSeparatedByString:@\"=\"];\n        NSString *key = [keyValue[0] xng_URLDecode];\n        NSString *value = [keyValue[1] xng_URLDecode];\n        dictionary[key] = value;\n    }\n\n    return dictionary;\n}\n\n- (NSString *)xng_queryStringRepresentation {\n    NSMutableArray *paramArray = [NSMutableArray array];\n\n    [self enumerateKeysAndObjectsUsingBlock:^(id key, id value, BOOL *stop) {\n        NSString *param = [NSString stringWithFormat:@\"%@=%@\", [key xng_URLEncode], [value xng_URLEncode]];\n        [paramArray addObject:param];\n    }];\n\n    return [paramArray componentsJoinedByString:@\"&\"];\n}\n\n\n\n@end\n",
            "coverage": [
                null,
                null,
                null,
                null,
                null,
                3,
                3,
                3,
                null,
                4,
                4,
                4,
                null,
                28,
                10,
                10,
                10,
                10,
                28,
                null,
                4,
                4,
                null,
                null,
                3,
                null,
                3,
                2,
                2,
                2,
                null,
                1,
                1,
                null,
                null,
                null,
                null
            ]
        },
        {
            "name": "XNGOAuth1Client/NSString+XNGOAuth1Additions.m",
            "source": "#import \"NSString+XNGOAuth1Additions.h\"\n\n@implementation NSString (XNGOAuth1Additions)\n\n- (NSString *)xng_URLEncode {\n    return (__bridge_transfer NSString *)\n            CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,\n                    (__bridge CFStringRef)self,\n                    NULL,\n                    (__bridge CFStringRef)@\"!*'\\\"();:@&=+$,/?%#[] \",\n                    kCFStringEncodingUTF8);\n}\n\n- (NSString *)xng_URLDecode {\n    return (__bridge_transfer NSString *)\n            CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,\n                    (__bridge CFStringRef)self,\n                    (__bridge CFStringRef)@\"\",\n                    kCFStringEncodingUTF8);\n}\n\n@end\n",
            "coverage": [
                null,
                null,
                null,
                null,
                null,
                null,
                4,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                20,
                null,
                null,
                null,
                null,
                null,
                null
            ]
        },
        {
            "name": "XNGOAuth1Client/XNGOAuth1RequestOperationManager.m",
            "source": "#import \"XNGOAuth1RequestOperationManager.h\"\n#import \"XNGOAuthToken.h\"\n\nNSString * const XNGOAuth1ErrorDomain = @\"XNGOAuth1ErrorDomain\";\n\n@implementation XNGOAuth1RequestOperationManager\n\n- (id)initWithBaseURL:(NSURL *)baseURL consumerKey:(NSString *)consumerKey consumerSecret:(NSString *)consumerSecret {\n    self = [super initWithBaseURL:baseURL];\n\n    if (self) {\n        self.requestSerializer = [[XNGOAuth1RequestSerializer alloc] initWithService:baseURL.host\n                                                                         consumerKey:consumerKey\n                                                                              secret:consumerSecret];\n    }\n\n    return self;\n}\n\n- (BOOL)isAuthorized {\n    return (self.requestSerializer.accessToken && !self.requestSerializer.accessToken.isExpired);\n}\n\n- (BOOL)deauthorize {\n    return [self.requestSerializer removeAccessToken];\n}\n\n- (void)authorizeUsingOAuthWithRequestTokenPath:(NSString *)requestTokenPath\n                          userAuthorizationPath:(NSString *)userAuthorizationPath\n                                    callbackURL:(NSURL *)callbackURL\n                                accessTokenPath:(NSString *)accessTokenPath\n                                   accessMethod:(NSString *)accessMethod\n                                          scope:(NSString *)scope\n                                        success:(void (^)(XNGOAuthToken *oAuthToken, id responseObject))success\n                                        failure:(void (^)(NSError *error))failure {\n    self.requestSerializer.requestToken = nil;\n\n    AFHTTPResponseSerializer *defaultSerializer = self.responseSerializer;\n    self.responseSerializer = [AFHTTPResponseSerializer serializer];\n\n    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\n    parameters[@\"oauth_callback\"] = [callbackURL absoluteString];\n    if (scope && !self.requestSerializer.accessToken) {\n        parameters[@\"scope\"] = scope;\n    }\n\n    NSError *error;\n    NSString *URLString = [[NSURL URLWithString:requestTokenPath relativeToURL:self.baseURL] absoluteString];\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:accessMethod URLString:URLString parameters:parameters error:&error];\n\n    if (error && failure) {\n        failure(error);\n        return;\n    }\n\n    AFHTTPRequestOperation *requestOperation = [self HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        self.responseSerializer = defaultSerializer;\n        XNGOAuthToken *requestToken = [[XNGOAuthToken alloc] initWithQueryString:operation.responseString];\n        self.requestSerializer.requestToken = requestToken;\n        if (success) {\n            success(requestToken, operation.responseObject);\n        }\n    } failure:^(AFHTTPRequestOperation *operation, NSError *requestError) {\n        self.responseSerializer = defaultSerializer;\n        if (failure) {\n            failure(requestError);\n        }\n    }];\n\n    [self.operationQueue addOperation:requestOperation];\n}\n\n- (void)acquireOAuthRequestTokenWithPath:(NSString *)path\n                             callbackURL:(NSURL *)callbackURL\n                            accessMethod:(NSString *)accessMethod\n                            requestToken:(XNGOAuthToken *)requestToken\n                                   scope:(NSString *)scope\n                                 success:(void (^)(XNGOAuthToken *requestToken, id responseObject))success\n                                 failure:(void (^)(NSError *error))failure {\n\n    if (requestToken.token && requestToken.verifier) {\n        AFHTTPResponseSerializer *defaultSerializer = self.responseSerializer;\n        self.responseSerializer = [AFHTTPResponseSerializer serializer];\n\n        NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\n        parameters[@\"oauth_token\"]    = requestToken.token;\n        parameters[@\"oauth_verifier\"] = requestToken.verifier;\n\n        NSError *error;\n        NSString *URLString = [[NSURL URLWithString:path relativeToURL:self.baseURL] absoluteString];\n        NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:accessMethod URLString:URLString parameters:parameters error:&error];\n\n        if (error && failure) {\n            failure(error);\n            return;\n        }\n\n        AFHTTPRequestOperation *requestOperation = [self HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject) {\n            self.responseSerializer = defaultSerializer;\n            self.requestSerializer.requestToken = nil;\n            XNGOAuthToken *accessToken = [[XNGOAuthToken alloc] initWithQueryString:operation.responseString];\n            [self.requestSerializer saveAccessToken:accessToken];\n            if (success) {\n                success(accessToken, operation.responseObject);\n            }\n        } failure:^(AFHTTPRequestOperation *operation, NSError *requestError) {\n            self.responseSerializer = defaultSerializer;\n            self.requestSerializer.requestToken = nil;\n            if (failure) {\n                failure(requestError);\n            }\n        }];\n\n        [self.operationQueue addOperation:requestOperation];\n    }\n    else {\n        NSError *error = [[NSError alloc] initWithDomain:XNGOAuth1ErrorDomain\n                                                    code:NSURLErrorBadServerResponse\n                                                userInfo:@{NSLocalizedFailureReasonErrorKey:@\"Invalid OAuth response received from server.\"}];\n        failure(error);\n    }\n}\n\n@end\n",
            "coverage": [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                7,
                7,
                null,
                7,
                7,
                null,
                null,
                7,
                null,
                7,
                7,
                null,
                null,
                8,
                5,
                null,
                null,
                1,
                null,
                null,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                null,
                2,
                1,
                null,
                1,
                1,
                1,
                2,
                2,
                null,
                1,
                1,
                1,
                null,
                1,
                2,
                2,
                null,
                null,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                0,
                0,
                0,
                0,
                0,
                null,
                2,
                1,
                null,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                null,
                2,
                2,
                1,
                null,
                1,
                1,
                1,
                null,
                1,
                1,
                1,
                null,
                1,
                0,
                0,
                null,
                null,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                null,
                1,
                4,
                null,
                0,
                null,
                null,
                2,
                0,
                1,
                null,
                null
            ]
        },
        {
            "name": "XNGOAuth1Client/XNGOAuth1RequestSerializer.m",
            "source": "#import \"XNGOAuth1RequestSerializer.h\"\n#import \"XNGOAuthToken.h\"\n#import \"XNGOAuth1RequestSerializer_Private.h\"\n\n@implementation XNGOAuth1RequestSerializer\n\n- (id)initWithService:(NSString *)service consumerKey:(NSString *)consumerKey secret:(NSString *)consumerSecret {\n    self = [super init];\n\n    if (self) {\n        _service = service;\n        _consumerKey = consumerKey;\n        _consumerSecret = consumerSecret;\n    }\n\n    return self;\n}\n\n- (XNGOAuthToken *)accessToken {\n    NSMutableDictionary *dictionary = [self.keychainDictionary mutableCopy];\n    dictionary[(__bridge id)kSecReturnData] = (__bridge id)kCFBooleanTrue;\n    dictionary[(__bridge id)kSecMatchLimit] = (__bridge id)kSecMatchLimitOne;\n\n    CFDataRef result = nil;\n    OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)dictionary, (CFTypeRef *)&result);\n    NSData *data = (__bridge_transfer NSData *)result;\n\n    if (status == noErr && data) {\n        return [NSKeyedUnarchiver unarchiveObjectWithData:data];\n    } else {\n        return nil;\n    }\n}\n\n- (BOOL)saveAccessToken:(XNGOAuthToken *)oauthToken {\n    NSMutableDictionary *dictionary = [self.keychainDictionary mutableCopy];\n\n    NSMutableDictionary *updateDictionary = [NSMutableDictionary dictionary];\n    NSData *data = [NSKeyedArchiver archivedDataWithRootObject:oauthToken];\n    updateDictionary[(__bridge id)kSecValueData] = data;\n\n    OSStatus status;\n    if ([self accessToken]) {\n        status = SecItemUpdate((__bridge CFDictionaryRef)dictionary, (__bridge CFDictionaryRef)updateDictionary);\n    } else {\n        [dictionary addEntriesFromDictionary:updateDictionary];\n        status = SecItemAdd((__bridge CFDictionaryRef)dictionary, NULL);\n    }\n\n    return status == noErr;\n}\n\n- (BOOL)removeAccessToken {\n    OSStatus status = SecItemDelete((__bridge CFDictionaryRef)self.keychainDictionary);\n    return status == noErr;\n}\n\n#pragma mark - Helper\n\n- (NSDictionary *)keychainDictionary {\n    return @{(__bridge id)kSecClass:(__bridge id)kSecClassGenericPassword,\n            (__bridge id)kSecAttrService:self.service};\n}\n\n@end\n",
            "coverage": [
                null,
                null,
                null,
                null,
                10,
                null,
                10,
                10,
                null,
                10,
                10,
                10,
                10,
                10,
                null,
                10,
                10,
                null,
                null,
                15,
                15,
                15,
                null,
                15,
                15,
                15,
                null,
                24,
                9,
                null,
                6,
                null,
                15,
                null,
                6,
                6,
                null,
                6,
                6,
                6,
                null,
                6,
                6,
                2,
                2,
                4,
                4,
                null,
                null,
                6,
                6,
                null,
                null,
                4,
                4,
                null,
                null,
                null,
                null,
                null,
                25,
                null,
                null,
                null,
                null
            ]
        },
        {
            "name": "XNGOAuth1Client/XNGOAuthToken.m",
            "source": "#import \"XNGOAuthToken.h\"\n#import \"NSDictionary+XNGOAuth1Additions.h\"\n#import \"XNGOAuthToken_Private.h\"\n\nstatic NSString *const XNGOAuthTokenTokenKey = @\"oauth_token\";\nstatic NSString *const XNGOAuthTokenSecretKey = @\"oauth_token_secret\";\nstatic NSString *const XNGOAuthTokenVerifierKey = @\"oauth_verifier\";\nstatic NSString *const XNGOAuthTokenDurationKey = @\"oauth_token_duration\";\n\n@implementation XNGOAuthToken\n\n- (id)initWithToken:(NSString *)token secret:(NSString *)secret expiration:(NSDate *)expiration {\n    self = [super init];\n\n    if (self) {\n        _token = token;\n        _secret = secret;\n        _expiration = expiration;\n    }\n\n    return self;\n}\n\n- (id)initWithQueryString:(NSString *)queryString {\n\n    if (!queryString || queryString.length == 0) {\n        return nil;\n    }\n\n    NSDictionary *attributes = [NSDictionary xng_dictionaryFromQueryString:queryString];\n\n    if (attributes.allKeys.count == 0) {\n        return nil;\n    }\n\n    NSString *token = attributes[XNGOAuthTokenTokenKey];\n    NSString *secret = attributes[XNGOAuthTokenSecretKey];\n    NSString *verifier = attributes[XNGOAuthTokenVerifierKey];\n\n    NSDate *expiration;\n    if (attributes[XNGOAuthTokenDurationKey]) {\n        expiration = [NSDate dateWithTimeIntervalSinceNow:[attributes[XNGOAuthTokenDurationKey] doubleValue]];\n    }\n\n    self = [self initWithToken:token secret:secret expiration:expiration];\n\n    if (self) {\n        _verifier = verifier;\n\n        NSMutableDictionary *mutableUserInfo = [attributes mutableCopy];\n        [mutableUserInfo removeObjectsForKeys:@[XNGOAuthTokenTokenKey, XNGOAuthTokenSecretKey, XNGOAuthTokenVerifierKey, XNGOAuthTokenDurationKey]];\n        if (mutableUserInfo.allKeys.count > 0) {\n            _userInfo = [NSDictionary dictionaryWithDictionary:mutableUserInfo];\n        }\n    }\n\n    return self;\n}\n\n- (BOOL)isExpired {\n    if (!self.expiration) {\n        return NO;\n    }\n\n    NSDate *now = [NSDate date];\n    BOOL compareResult = [self.expiration compare:now] == NSOrderedAscending;\n\n    return compareResult;\n}\n\n#pragma mark - NSCoding\n\n- (id)initWithCoder:(NSCoder *)aDecoder {\n    self = [super init];\n\n    if (self) {\n        _token = [aDecoder decodeObjectForKey:NSStringFromSelector(@selector(token))];\n        _secret = [aDecoder decodeObjectForKey:NSStringFromSelector(@selector(secret))];\n        _expiration = [aDecoder decodeObjectForKey:NSStringFromSelector(@selector(expiration))];\n        _verifier = [aDecoder decodeObjectForKey:NSStringFromSelector(@selector(verifier))];\n        _userInfo = [aDecoder decodeObjectForKey:NSStringFromSelector(@selector(userInfo))];\n    }\n\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:self.token forKey:NSStringFromSelector(@selector(token))];\n    [aCoder encodeObject:self.secret forKey:NSStringFromSelector(@selector(secret))];\n    [aCoder encodeObject:self.expiration forKey:NSStringFromSelector(@selector(expiration))];\n    [aCoder encodeObject:self.verifier forKey:NSStringFromSelector(@selector(verifier))];\n    [aCoder encodeObject:self.userInfo forKey:NSStringFromSelector(@selector(userInfo))];\n}\n\n@end\n",
            "coverage": [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                21,
                null,
                11,
                11,
                null,
                11,
                11,
                11,
                11,
                11,
                null,
                11,
                11,
                null,
                3,
                null,
                5,
                1,
                null,
                null,
                2,
                null,
                2,
                0,
                null,
                null,
                2,
                2,
                2,
                null,
                2,
                2,
                0,
                0,
                null,
                2,
                null,
                2,
                2,
                null,
                2,
                2,
                2,
                0,
                0,
                2,
                null,
                2,
                7,
                null,
                null,
                5,
                1,
                null,
                null,
                4,
                4,
                null,
                4,
                9,
                null,
                null,
                null,
                9,
                9,
                null,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                null,
                9,
                9,
                null,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                null,
                null
            ]
        }
    ]
}
