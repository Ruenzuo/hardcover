{
  "name": "XNGOAuth1Client/XNGOAuth1RequestOperationManager.m",
  "source": "#import \"XNGOAuth1RequestOperationManager.h\"\n#import \"XNGOAuthToken.h\"\n\nNSString * const XNGOAuth1ErrorDomain = @\"XNGOAuth1ErrorDomain\";\n\n@implementation XNGOAuth1RequestOperationManager\n\n- (id)initWithBaseURL:(NSURL *)baseURL consumerKey:(NSString *)consumerKey consumerSecret:(NSString *)consumerSecret {\n    self = [super initWithBaseURL:baseURL];\n\n    if (self) {\n        self.requestSerializer = [[XNGOAuth1RequestSerializer alloc] initWithService:baseURL.host\n                                                                         consumerKey:consumerKey\n                                                                              secret:consumerSecret];\n    }\n\n    return self;\n}\n\n- (BOOL)isAuthorized {\n    return (self.requestSerializer.accessToken && !self.requestSerializer.accessToken.isExpired);\n}\n\n- (BOOL)deauthorize {\n    return [self.requestSerializer removeAccessToken];\n}\n\n- (void)authorizeUsingOAuthWithRequestTokenPath:(NSString *)requestTokenPath\n                          userAuthorizationPath:(NSString *)userAuthorizationPath\n                                    callbackURL:(NSURL *)callbackURL\n                                accessTokenPath:(NSString *)accessTokenPath\n                                   accessMethod:(NSString *)accessMethod\n                                          scope:(NSString *)scope\n                                        success:(void (^)(XNGOAuthToken *oAuthToken, id responseObject))success\n                                        failure:(void (^)(NSError *error))failure {\n    self.requestSerializer.requestToken = nil;\n\n    AFHTTPResponseSerializer *defaultSerializer = self.responseSerializer;\n    self.responseSerializer = [AFHTTPResponseSerializer serializer];\n\n    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\n    parameters[@\"oauth_callback\"] = [callbackURL absoluteString];\n    if (scope && !self.requestSerializer.accessToken) {\n        parameters[@\"scope\"] = scope;\n    }\n\n    NSError *error;\n    NSString *URLString = [[NSURL URLWithString:requestTokenPath relativeToURL:self.baseURL] absoluteString];\n    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:accessMethod URLString:URLString parameters:parameters error:&error];\n\n    if (error && failure) {\n        failure(error);\n        return;\n    }\n\n    AFHTTPRequestOperation *requestOperation = [self HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject) {\n        self.responseSerializer = defaultSerializer;\n        XNGOAuthToken *requestToken = [[XNGOAuthToken alloc] initWithQueryString:operation.responseString];\n        self.requestSerializer.requestToken = requestToken;\n        if (success) {\n            success(requestToken, operation.responseObject);\n        }\n    } failure:^(AFHTTPRequestOperation *operation, NSError *requestError) {\n        self.responseSerializer = defaultSerializer;\n        if (failure) {\n            failure(requestError);\n        }\n    }];\n\n    [self.operationQueue addOperation:requestOperation];\n}\n\n- (void)acquireOAuthRequestTokenWithPath:(NSString *)path\n                             callbackURL:(NSURL *)callbackURL\n                            accessMethod:(NSString *)accessMethod\n                            requestToken:(XNGOAuthToken *)requestToken\n                                   scope:(NSString *)scope\n                                 success:(void (^)(XNGOAuthToken *requestToken, id responseObject))success\n                                 failure:(void (^)(NSError *error))failure {\n\n    if (requestToken.token && requestToken.verifier) {\n        AFHTTPResponseSerializer *defaultSerializer = self.responseSerializer;\n        self.responseSerializer = [AFHTTPResponseSerializer serializer];\n\n        NSMutableDictionary *parameters = [NSMutableDictionary dictionary];\n        parameters[@\"oauth_token\"]    = requestToken.token;\n        parameters[@\"oauth_verifier\"] = requestToken.verifier;\n\n        NSError *error;\n        NSString *URLString = [[NSURL URLWithString:path relativeToURL:self.baseURL] absoluteString];\n        NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:accessMethod URLString:URLString parameters:parameters error:&error];\n\n        if (error && failure) {\n            failure(error);\n            return;\n        }\n\n        AFHTTPRequestOperation *requestOperation = [self HTTPRequestOperationWithRequest:request success:^(AFHTTPRequestOperation *operation, id responseObject) {\n            self.responseSerializer = defaultSerializer;\n            self.requestSerializer.requestToken = nil;\n            XNGOAuthToken *accessToken = [[XNGOAuthToken alloc] initWithQueryString:operation.responseString];\n            [self.requestSerializer saveAccessToken:accessToken];\n            if (success) {\n                success(accessToken, operation.responseObject);\n            }\n        } failure:^(AFHTTPRequestOperation *operation, NSError *requestError) {\n            self.responseSerializer = defaultSerializer;\n            self.requestSerializer.requestToken = nil;\n            if (failure) {\n                failure(requestError);\n            }\n        }];\n\n        [self.operationQueue addOperation:requestOperation];\n    }\n    else {\n        NSError *error = [[NSError alloc] initWithDomain:XNGOAuth1ErrorDomain\n                                                    code:NSURLErrorBadServerResponse\n                                                userInfo:@{NSLocalizedFailureReasonErrorKey:@\"Invalid OAuth response received from server.\"}];\n        failure(error);\n    }\n}\n\n@end\n",
  "coverage": [
    null,
  null,
  null,
  null,
  null,
  null,
  null,
  7,
  7,
  null,
  7,
  7,
  null,
  null,
  7,
  null,
  7,
  7,
  null,
  null,
  8,
  5,
  null,
  null,
  1,
  null,
  null,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  null,
  2,
  1,
  null,
  1,
  1,
  1,
  0,
  0,
  null,
  1,
  1,
  1,
  null,
  1,
  0,
  0,
  null,
  null,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  0,
  0,
  0,
  0,
  0,
  null,
  2,
  1,
  null,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  null,
  2,
  2,
  1,
  null,
  1,
  1,
  1,
  null,
  1,
  1,
  1,
  null,
  1,
  0,
  0,
  null,
  null,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  0,
  0,
  0,
  0,
  0,
  0,
  null,
  1,
  4,
  null,
  0,
  null,
  null,
  2,
  0,
  1,
  null,
  null
    ]
}
